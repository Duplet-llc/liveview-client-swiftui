@Tutorial(time: 30) {
    @XcodeRequirement(title: "Xcode 13.3", destination: "https://developer.apple.com/download/applications/")
    
    @Intro(title: "Add a Navigation Bar Button with a Custom Attribute") {
        Use a custom modifier to add a navigation bar button to the detail view.
        
        @Image(source: 05-00-intro-header.png, alt: "The cat detail screen with a filled star button in the top right corner.")
    }
    
    @Section(title: "Update the Backend") {
        Update the backend live view to allow it to display and change the favorite state.
        
        @Steps {
            @Step {
                Open the `cat_live.ex` file.
                
                @Code(name: "lib/lvn_tutorial_web/live/cat_live.ex", file: 04-04-01-change-score.ex)
            }
            
            @Step {
                Update the `mount` callback to add an assign for whether the cat has been favorited or not.
                
                @Code(name: "lib/lvn_tutorial_web/live/cat_live.ex", file: 05-01-01-assign.ex)
            }
            
            @Step {
                Then, add another event handler that the frontend will trigger to update the favorite state.
                
                @Code(name: "lib/lvn_tutorial_web/live/cat_live.ex", file: 05-01-02-toggle-favorite.ex)
            }
            
            @Step {
                Edit the `cat_live.ios.heex` template.
                
                @Code(name: "lib/lvn_tutorial_web/live/cat_live.ios.heex", file: 04-04-02-cat-rating.ios.heex)
            }
            
            @Step {
                Add the custom attribute `nav-favorite` to the `<vstack>`.
                
                We use `to_string` to convert the boolean assign into a string, because just using it as a boolean directs Phoenix to remove the attribute from the DOM when the value is `false`. We want the attribute to always be there, so that the navigation bar button is always present.
                
                @Code(name: "lib/lvn_tutorial_web/live/cat_live.ios.heex", file: 05-01-03-attribute.ios.heex)
            }
        }
    }
    
    @Section(title: "Implement the Attribute") {
        Add code for handling the `nav-favorite` attribute to your custom registry.
        
        @Steps {
            @Step {
                Edit your custom registry implementation.
                
                @Code(name: "MyRegistry.swift", file: 04-01-04-view.swift)
            }
            
            @Step {
                Replace the `AttributeName` type alias with a new enum of the same name. This enum, similar to the `TagName` one, defines the attributes that your registry supports.
                
                @Code(name: "MyRegistry.swift", file: 05-02-01-attribute-name.swift)
            }
            
            @Step {
                Implement the `lookupModifier` method. This method is invoked by the framework whenever it encounters an attribute that your registry has declared support for.
                
                In the method, we'll switch over the name of the attribute, and if it's the `nav-favorite` attribute, return the `NavFavoriteModifier`. As with the `lookup` method, don't include a default branch so that the compiler ensures your switch is exhaustive.
                
                @Code(name: "MyRegistry.swift", file: 05-02-02-apply.swift)
            }
            
            @Step {
                Create a struct called `NavFavoriteModifier` that implements the `ViewModifier` protocol.
                
                @Code(name: "NavFavoriteModifier.swift", file: 05-02-03-empty-modifier.swift)
            }
            
            @Step {
                Add the `value` and `context` properties to the modifier struct.
                
                The value will be used to show the current state of the favorite button, and the context will let us access the coordinator so we can send an event when the btuton's tapped.
                
                @Code(name: "NavFavoriteModifier.swift", file: 05-02-04-properties.swift)
            }
            
            @Step {
                In the body method, we'll take the content and add to it a toolbar item placed in the trailing position of the navigation bar.
                
                @Code(name: "NavFavoriteModifier.swift", file: 05-02-05-toolbar.swift)
            }
            
            @Step {
                The button inside the toolbar item will display a filled or unfilled star, depending on the current state. When the button is tapped, it will trigger the `toggle-favorite` we set up before on the backend. We pass an empty dictionary as the value for the event, since there's no other data we need to send.
                
                With that, you can re-run the app and observe the new attribute in action!
                
                @Code(name: "NavFavoriteModifier.swift", file: 05-02-06-button.swift) {
                    @Video(source: 05-02-07-preview.mp4, poster: 05-02-08-preview-poster.png)
                }
            }
        }
    }
}
